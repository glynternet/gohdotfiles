if [[ -z "$GARMIN_MOUNT" ]]; then
	echo "GARMIN_MOUNT should be set before sourcing garmin-strava"
fi

export GARMIN_ACTIVITIES_DIR="$GARMIN_MOUNT/Garmin/Activities"
export GARMIN_NEWFILES_DIR="$GARMIN_MOUNT/Garmin/NewFiles"

garmin-upload() {
	local usage="usage: ${FUNCNAME[0]} <file> [<file>...]"
	if [[ ! "$#" -gt 0 ]]; then
		echo "Must provide at least one file to upload. Usage: $usage"
		return 1
	fi

	if [[ ! -d ${GARMIN_NEWFILES_DIR:?GARMIN_NEWFILES_DIR not set} ]]; then
		echo "Garmin New Files directory not found at '$GARMIN_NEWFILES_DIR'"
		return 1
	fi

	cp -v "$@" ${GARMIN_NEWFILES_DIR:?GARMIN_NEWFILES_DIR not set}
}
export -f garmin-upload

archive-route() {
	local usage="usage: ${FUNCNAME[0]} ROUTE"
	local route="${1:?"$usage"}"

	if [[ ! -d ${CYCLING_ROUTES_ARCHIVE:?CYCLING_ROUTES_ARCHIVE not set} ]]; then
		echo "Cycling routes archive directory not found at '$CYCLING_ROUTES_ARCHIVE'"
		return 1
	fi

	mv -v "$route" "$CYCLING_ROUTES_ARCHIVE"
}
export -f archive-route

garmin-upload-and-archive-downloaded-routes() {
	local routes="$(find "$HOME/Downloads" \
		-iname '*.tcx' \
		-or \
		-iname '*.gpx')"

	if [[ "$routes" = "" ]]; then
		echo "No routes found."
		return 1
	fi

	garmin-upload-and-archive-routes "$routes"
}

garmin-upload-and-archive-routes() {
	local usage="usage: ${FUNCNAME[0]} ROUTES..."
	local routes="${1:?"$usage"}"

	for cmd in garmin-upload archive-route; do
		parallel "$cmd" {} ::: "$routes"
		local code="$?"
		if [[ "$code" -ne "0" ]]; then
			echo "parallel exited with code: $code"
			echo "not continuing"
			return 3
		fi
	done
}

garmin-archive-activity() {
	local usage="usage: ${FUNCNAME[0]} ACTIVITY"
	local activity="${1:?"$usage"}"

	if [[ ! -d "$CYCLING_ACTIVITIES_ARCHIVE" ]]; then
		echo "Cycling activities archive directory not found at '$CYCLING_ACTIVITIES_ARCHIVE'"
		return 1
	fi

	archive-activity "$GARMIN_ACTIVITIES_DIR/$activity" "$CYCLING_ACTIVITIES_ARCHIVE/"
}

archive-activity() {
	local usage="usage: ${FUNCNAME[0]} ACTIVITY"
	local activity="${1:?"$usage"}"

	if [[ ! -d "${CYCLING_ACTIVITIES_ARCHIVE:?CYCLING_ACTIVITIES_ARCHIVE not set}" ]]; then
		echo "Cycling activities archive directory not found at '$CYCLING_ACTIVITIES_ARCHIVE'"
		return 1
	fi

	mv -v "$activity" "$CYCLING_ACTIVITIES_ARCHIVE/"
}

garmin-uploaddownloaded-archive-umount() {
	garmin-upload-and-archive-downloaded-routes
	code=$?
	if [[ ! "$code" -eq 0 ]]; then
		echo Not unmounting
		return 1
	fi
	garmin-umount
}

strava-upload-garmin-activity() {
	local usage="Usage: ${FUNCNAME[0]} <filename>"
	local filename="${1:?$usage}"
	local file="$GARMIN_ACTIVITIES_DIR/$filename"
	local name="${2}"

	strava-upload "$file" "$name"
}

strava-upload() {
	local usage="Usage: ${FUNCNAME[0]} <file>"
	local file="${1:?$usage}"
	local name="${2}"

	curl -X POST https://www.strava.com/api/v3/uploads \
	    -H "Authorization: Bearer ${STRAVA_KEY:?STRAVA_KEY not set}" \
	    -H "accept: application/json" \
	    -H "Content-Type: multipart/form-data" \
	    -F file="@$file" \
	    -F name="$name" \
	    -F data_type=fit \
	    | jq .
}

_garmin_activities_completion() {
	if [[ ! -d "${GARMIN_ACTIVITIES_DIR:?GARMIN_ACTIVITIES_DIR not set}" ]]; then
		echo "Garmin activities directory not found at '$GARMIN_ACTIVITIES_DIR'"
		return 1
	fi

	COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    COMPREPLY=($(compgen -W "$(find $GARMIN_ACTIVITIES_DIR -iname "${word}*.fit" -printf "%f\n")" -- "$word"));
}

complete -F '_garmin_activities_completion' strava-upload-garmin-activity

strava-upload-and-archive() {
	local usage="usage: strava-upload-and-archive ACTIVITY"
	local activity="${1:?$usage}"
	local name="${2}"

	if [[ ! -d "${GARMIN_ACTIVITIES_DIR:?GARMIN_ACTIVITIES_DIR not set}" ]]; then
		echo "Garmin activities directory not found at '$GARMIN_ACTIVITIES_DIR'"
		return 1
	fi

	if [[ ! -d "${CYCLING_ACTIVITIES_ARCHIVE:?CYCLING_ACTIVITIES_ARCHIVE not set}" ]]; then
		echo "Cycling activities directory not found at '$CYCLING_ACTIVITIES_ARCHIVE'"
		return 2
	fi

	strava-upload-garmin-activity "$@"
	local code="$?"
	if [[ "$code" -ne "0" ]]; then
		echo "strava-upload-garmin-activity exited with code: $code"
		echo "not continuing"
		return 3
	fi

	garmin-archive-activity "$activity"
}

complete -F '_garmin_activities_completion' strava-upload-and-archive

garmin-umount() {
	local umountCmd="umount -v"
	$umountCmd "$GARMIN_MOUNT"
	if [[ -z "$GARMIN_CARD" ]]; then
		echo "GARMIN_CARD is not set. Set to \"none\" to remove this warning"
		return 1
	fi
	if [[ "$GARMIN_CARD" = "none" ]]; then
		return 0
	fi
	if [[ ! -f "$GARMIN_CARD" ]]; then
		echo "$GARMIN_CARD does not exist, likely already unmounted."
		return 0
	fi
	$umountCmd "$GARMIN_CARD"
}
export -f garmin-umount

garmin-is-mounted() {
	test -d "$GARMIN_MOUNT"
}

garmin-list-activities() {
	find $GARMIN_ACTIVITIES_DIR -iname "${word}*.fit" -printf "%f\n"
}
