alias g='git'
alias ga='git add'
alias gap='git add -p'
complete -W "-p -u" ga
alias gch='git checkout'
complete -F '__git_all_branch_list_completion' gch
alias gco="git commit"
alias gcd='git checkout $(git-default-remote-default-branch)'
alias gd='git diff'
alias gdc='git diff --cached'
complete -F '__git_all_branch_list_completion' gd
# TODO(ghanmer): Make it so that we can have flags and branches for gd
# complete -W "--cached" gd
alias gdo='git diff $(git-default-remote)/$(git-currentbranch)'
alias gs='git status'
alias gladog='git log --all --decorate --oneline --graph'
alias gladog-me='gladog --author=Glyn'
alias gp="git push"
alias greb='git rebase'
complete -F '_greb' greb
alias grp='git remote prune'
alias grpo='grp $(git-default-remote)'

gf() {
	git fetch ${1:-$(git-default-remote)}
}

git-add-commit() {
	git add "$1"
	git commit -m "$2"
}

git-clone-github() {
	git clone ssh://git@github.com/$1
}

git-checkout-detached() {
	git checkout $(git-sha $1)
}
complete -F __git_all_branch_list_completion git-checkout-detached

git-checkout-detached-default() {
	git-checkout-detached $(git-default-remote)/$(git-default-remote-default-branch)
}

git-default-remote() {
	git remote | head -1
}

git-default-remote-default-branch() {
	defaultRemote="$(git-default-remote)" && \
		git symbolic-ref refs/remotes/$defaultRemote/HEAD | sed "s@^refs/remotes/$defaultRemote/@@"
}

alias git-log-hash='git log --format=format:%H'

git-stat-diff() {
	echo "$(git -c  'color.ui=always' --no-pager status && \
	git -c  'color.ui=always' --no-pager diff)" | \
	less -r
}

alias git-init-initial-commit='git init && git commit -m "üéâ initial commit" --allow-empty'

git-commits-plain() {
	git log --format=%s%n%b%n%N $@
}

git-commit-dependency-bump() {
	local dependency=${1:?must provide dependency name}
	local version=${2:?must new version}
	git commit -m "‚¨ÜÔ∏è bump $dependency to $version"
}

gitmoji() {
	local gitmojisJson=${GITMOJIS_JSON:?"not set. Do you need to fetch https://raw.githubusercontent.com/carloscuesta/gitmoji/master/src/data/gitmojis.json ?"}
	local emojiCode=$1
	if [[ -z "$emojiCode" ]]; then
		less ${GITMOJIS_JSON}
		return
	fi
	local json
	if ! json="$(jq --exit-status '.[][] | select(.code == ":'$emojiCode':")' < "$gitmojisJson")"; then
		echo "Gitmoji not found üòî: $emojiCode"
		return 1
	fi
	echo $json | jq .
	echo $json | jq .emoji -j | copy
	echo "copied to clipboard!"
}
_gitmoji() {
	COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    local options="$(jq -c -r '.[][].code' ${GITMOJIS_JSON:?"not set. Do you need to fetch https://raw.githubusercontent.com/carloscuesta/gitmoji/master/src/data/gitmojis.json ?"} | sed 's/://g')"
    COMPREPLY=($(compgen -W "$options" -- "${word}"));
}
complete -F '_gitmoji' gitmoji

generateGitBranchFunctions() {
	prefix="${1:?must provide branch prefix}"
	eval "${prefix}checkout() {
		git checkout $prefix/\$1
	}

	_${prefix}checkout() {
		COMPREPLY=();
	    local word=\"\${COMP_WORDS[COMP_CWORD]}\";
	    COMPREPLY=(\$(compgen -W \"\$(git-all-branches-remotenames_stripped | grep --color=never \"^${prefix}/\" | sed \"s@${prefix}/@@\")\" -- \"\$word\"));
	}

	complete -F '_${prefix}checkout' ${prefix}checkout

	${prefix}newbranch() {
		local branchSuffix=\${1:?\"must provide branch suffix\"}
		shift
		git checkout -b ${prefix}/\$branchSuffix \$@
	}

	${prefix}newbranch-fromdefault() {
		local branchSuffix=\${1:?\"must provide branch suffix\"}
		echo \$branchSuffix
		${prefix}newbranch \$branchSuffix \$(git-default-remote)/\$(git-default-remote-default-branch)
	}"
}

_greb() {
	COMPREPLY=();
	local word="${COMP_WORDS[COMP_CWORD]}";
	COMPREPLY=($(compgen -W "$(echo --abort --continue --skip && git-all-branches)" -- "$word"));
}

greso() {
	# it may be worth updating this to be more similar to grebo
	local base="${1:?$(git-currentbranch)}"
	local ref="$(git-default-remote)/$base"
	echo "Are you sure you'd like to call 'git reset --hard \"$ref\"'"
	read sure
	if [[ "$sure" = "y" ]]; then
		git reset --hard "$ref"
	else
		echo "answer not 'y', so not calling 'git reset --hard \"$ref\"'"
	fi
}

grebo() {
	local branch=${@: -1}
	branch=${branch:-$(git-currentbranch)}
	local argsLength=$(($#-1))
	local opts=${@:1:$argsLength}
	gf && greb $opts $(git-default-remote)/$branch
}

# this needs fixing
_grebo() {
	COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    COMPREPLY=($(compgen -W "$(git branch -r | cut -c 3- | sed "s@^$(git-default-remote)/@@g")" -- "$word"));
}
complete -F '_grebo' grebo

grebod() {
	gf && greb "$@" "$(git-default-remote)/$(git-default-remote-default-branch)"
}

greb-last() {
	local usage="usage: ${FUNCNAME[0]} num_commits"
	local numCommits="${1:?"$usage"}"
	greb -i HEAD~$numCommits
}

greb-since() {
	local usage="usage ${FUNCNAME[0]} reference"
	local reference="${1:?"$usage"}"
	greb -i $reference
}
complete -F '__git_all_branch_list_completion' greb-since

greb-since-inclusive() {
	local usage="usage ${FUNCNAME[0]} reference"
	local reference="${1:?"$usage"}"
	greb -i $reference~
}
complete -F '__git_all_branch_list_completion' greb-since-inclusive

git-currentbranch() {
	git rev-parse --abbrev-ref HEAD
}

git-currentbranch-equals() {
	local checkBranchName="${1:?must provide branch name}"
	local current="$(git-currentbranch)"
	if [[ ! "$checkBranchName" = "$current" ]]; then
		echo "Not on that branch - current:$current, expected:$checkBranchName"
		return 1
	fi
	return 0
}

git-is-clean() {
	if [ -n "$(git status --porcelain)" ]; then
		git status
		echo git is not clean
		return 1
	fi
	git status
	echo git is clean
	return 0
}

git-sha() {
	git show-ref -s $@ | sort | uniq
}

git-last-commit-message() {
	git log -1 --pretty=%B | head -1
}

git-push-new-branch() {
	local currentBranch="$(git-currentbranch)"
	if [[ $currentBranch =~ ^develop|master$ ]]; then
		echo "You're on $currentBranch and probably don't want to be doing this"
		return 1
	fi
	git push -u $(git-default-remote) "$(git-currentbranch)"
}

git-branches-onlylocal() {
	compare-local-and-remote-branches -23
}

git-branches-intersectlocalandremote() {
	compare-local-and-remote-branches -13
}

git-branches-onlyremote() {
	compare-local-and-remote-branches -12
}

compare-local-and-remote-branches() {
	comm ${1} <(git branch --color=never | sort) <(git branch -r | sed "s@$(git-default-remote)/@@" | sort) | cut -c 3- | grep -v "^(HEAD detached at"
}

version() {
	local rootDir="$(git rev-parse --show-toplevel)"
	local untracked="$(test -z "$(git ls-files --others --exclude-standard "$rootDir")" || echo -untracked)"
	local version="$(git describe --tags --dirty --always)$untracked"
	echo $version
}

git-all-branches() {
	git branch -a | cut -c 3- | cut -d" " -f1 | sed "s|^remotes/||g" | sort | uniq
}

git-all-branches-remotenames_stripped() {
	git-all-branches | sed "s|^$(git-default-remote)/||g" | sort | uniq
}

__git_all_branch_list_completion() {
    COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    COMPREPLY=($(compgen -W "$(git-all-branches)" -- "$word"));
}

git-prep-repository() {
	if [[ -n "$(git status --short)" ]] ; then
		echo "Repository is not clean"
		git status
		return 1
	fi
	git checkout ${1:-develop} && git fetch && greso --confirm
}

git-prune-local-branches() {
	select branch in "Nope" $(git-branches-onlylocal); do
		if [[ $branch = "Nope" ]]; then
			break
		fi
		git branch -D $branch
	done;
}

git-run-in-repo() {
	usage="usage: ${FUNCNAME[0]} REPOPATH COMMAND..."
	repoPath=${1:?"must provide repo path"}
	firstArg=${2:?"must provide something to run"}
	shift

	if ! command -V $firstArg > /dev/null; then
		echo First argument of thing to run, $firstArg is not executable
		return 1
	fi

	echo Running
	echo "working directory: $repoPath"
	echo "command: $@"
	# add a `dev check $repo` subcommand to avoid relying on repoPath implementation above?
	( cd $repoPath && git-prep-repository $(git-default-remote-default-branch) && $@ && git status )
}
