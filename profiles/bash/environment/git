alias ga='git add'
complete -W "-p -u" ga
alias gch='git checkout'
complete -F '__git_branch_list_completion' gch
alias gco="git commit"
alias gcd='git checkout develop'
alias gd='git diff'
complete -F '__git_branch_list_completion' gd
# TODO(ghanmer): Make it so that we can have flags and branches for gd
# complete -W "--cached" gd
alias gdo='git diff origin/$(git-currentbranch)'
alias gf='git fetch'
alias gs='git status'
alias gladog='git log --all --decorate --oneline --graph'
alias gladog-me='gladog --author=Glyn'
alias greb='git rebase'
complete -W "--abort --continue --skip" greb
alias grp='git remote prune'
alias grpo='grp origin'

git-add-commit() {
	git add "$1"
	git commit -m "$2"
}

git-clone-github() {
	git clone ssh://git@github.com/$1
}

alias git-log-hash='git log --format=format:%H'

git-stat-diff() {
	echo "$(git -c  'color.ui=always' --no-pager status && \
	git -c  'color.ui=always' --no-pager diff)" | \
	less -r
}

alias git-init-initial-commit='git init && git commit -m "ðŸŽ‰ initial commit" --allow-empty'

git-commits-plain() {
	git log --format=%s%n%b%n%N $@
}

gitmoji() {
	local gitmojisJson=${GITMOJIS_JSON:?not set}
	local emojiName=$1
	if [[ -z "$emojiName" ]]; then
		less ${GITMOJIS_JSON}
		return
	fi
	local json="$(jq '.[][] | select(.name == "'$emojiName'")' < "$gitmojisJson")"
	echo $json | jq .
	echo $json | jq .emoji -j | copy
	echo "copied to clipboard!"
}
_gitmoji() {
	COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    COMPREPLY=($(compgen -W "$(jq -c -r '.[][].name' ${GITMOJIS_JSON:?not set})" -- "$word"));
}
complete -F '_gitmoji' gitmoji


generateGitBranchFunctions() {
	prefix="${1:?must provide branch prefix}"
	eval "${prefix}checkout() {
		git checkout $prefix/\$1
	}

	_${prefix}checkout() {
		COMPREPLY=();
	    local word=\"\${COMP_WORDS[COMP_CWORD]}\";
	    COMPREPLY=(\$(compgen -W \"\$(git branch | cut -c 3- | grep --color=never \"^${prefix}/\" | sed \"s@${prefix}/@@\")\" -- \"\$word\"));
	}

	complete -F '_${prefix}checkout' ${prefix}checkout

	${prefix}newbranch() {
		local branchSuffix=\${1:?\"must provide branch suffix\"}
		shift
		git checkout -b ${prefix}/\$branchSuffix \$@
	}"
}

grebo() {
	local branch=${@: -1}
	local argsLength=$(($#-1))
	local opts=${@:1:$argsLength}
	gf && greb $opts origin/$branch
}

_grebo() {
	COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    COMPREPLY=($(compgen -W "$(git branch | cut -c 3-)" -- "$word"));
}

complete -F '_grebo' grebo

greb-last() {
	local usage="usage: ${FUNCNAME[0]} num_commits"
	local numCommits="${1:?"$usage"}"
	greb -i HEAD~$numCommits
}

greb-since() {
	local usage="usage ${FUNCNAME[0]} reference"
	local reference="${1:?"$usage"}"
	greb -i $reference
}

greb-since-inclusive() {
	local usage="usage ${FUNCNAME[0]} reference"
	local reference="${1:?"$usage"}"
	greb -i $reference~
}

git-currentbranch() {
	git rev-parse --abbrev-ref HEAD
}

git-push-new-branch() {
	git push -u origin "$(git-currentbranch)"
}

greso() {
	local base="$(git-currentbranch)"
	local remote=origin
	local ref="$remote/$base"
	echo "Are you sure you'd like to call 'git reset --hard \"$ref\"'"
	read sure
	if [[ "$sure" = "y" ]]; then
		git reset --hard "$ref"
	else
		echo "answer not 'y', so not calling 'git reset --hard \"$ref\"'"
	fi
}

git-branches-onlylocal() {
	compare-local-and-remote-branches -23
}

git-branches-intersectlocalandremote() {
	compare-local-and-remote-branches -13
}

git-branches-onlyremote() {
	compare-local-and-remote-branches -12
}

compare-local-and-remote-branches() {
	comm ${1} <(git branch --color=never | sort) <(git branch -r | sed 's@origin/@@' | sort)
}

version() {
	local rootDir="$(git rev-parse --show-toplevel)"
	local untracked="$(test -z "$(git ls-files --others --exclude-standard "$rootDir")" || echo -untracked)"
	local version="$(git describe --tags --dirty --always)$untracked"
	echo $version
}

__git_branch_list_completion() {
    COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    COMPREPLY=($(compgen -W "$(git branch | cut -c 3-)" -- "$word"));
}
