alias ga='git add'
complete -W "-p -u" ga
alias gch='git checkout'
complete -F '__git_branch_list_completion' gch
alias gco="git commit"
alias gcd='git checkout develop'
alias gd='git diff'
complete -F '__git_branch_list_completion' gd
# TODO(ghanmer): Make it so that we can have flags and branches for gd
# complete -W "--cached" gd
alias gdo='git diff origin/$(git-currentbranch)'
alias gf='git fetch'
alias gs='git status'
alias gladog='git log --all --decorate --oneline --graph'
alias gladog-me='gladog --author=Glyn'
alias greb='git rebase'
complete -W "--abort --continue --skip" greb
alias grp='git remote prune'
alias grpo='grp origin'

git-add-commit() {
	git add "$1"
	git commit -m "$2"
}

git-clone-github() {
	git clone ssh://git@github.com/$1
}

git-stat-diff() {
	echo "$(git -c  'color.ui=always' --no-pager status && \
	git -c  'color.ui=always' --no-pager diff)" | \
	less -r
}

# this is named like this to because if it were just to be git-adog,
# it would cause autocomplete confliction with git-add-commit
alias git-log-adog='git log --all --decorate --oneline --graph'

alias git-init-initial-commit='git init && git commit -m "initial commit" --allow-empty'

git-commits-plain() {
	git log --format=%s%n%b%n%N $@
}

alias version='git describe --tags --dirty --always'

gitmoji() {
	local gitmojisJson=${GITMOJIS_JSON:?not set}
	local emojiName=$1
	if [[ -z "$emojiName" ]]; then
		less ${GITMOJIS_JSON}
		return
	fi
	local json="$(jq '.[][] | select(.name == "'$emojiName'")' < "$gitmojisJson")"
	echo $json | jq .
	echo $json | jq .emoji -j | copy
	echo "copied to clipboard!"
}
_gitmoji() {
	COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    COMPREPLY=($(compgen -W "$(jq -c -r '.[][].name' ${GITMOJIS_JSON:?not set})" -- "$word"));
}
complete -F '_gitmoji' gitmoji

grebo() {
	local branch=${@: -1}
	local argsLength=$(($#-1))
	local opts=${@:1:$argsLength}
	gf && greb $opts origin/$branch
}

_grebo() {
	COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    COMPREPLY=($(compgen -W "$(git branch | cut -c 3-)" -- "$word"));
}

complete -F '_grebo' grebo

greb-last() {
	local usage="usage: ${FUNCNAME[0]} num_commits"
	local numCommits="${1:?"$usage"}"
	greb -i HEAD~$numCommits
}

greb-since() {
	local usage="usage ${FUNCNAME[0]} reference"
	local reference="${1:?"$usage"}"
	greb -i $reference
}

greb-since-inclusive() {
	local usage="usage ${FUNCNAME[0]} reference"
	local reference="${1:?"$usage"}"
	greb -i $reference~
}
