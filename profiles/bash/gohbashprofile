export HISTCONTROL=ignorespace
export HISTSIZE=10000
export HISTFILESIZE=20000
export HISTTIMEFORMAT="%y/%m/%d %T "
export CDPATH=.:~
export VISUAL=vim
export EDITOR=$VISUAL

## Profile Functions
### Path Functions
augment-path-if-exists(){
	if [[ $# -lt 1 ]]; then
		echo "Requires argument of path to add to PATH."
		return 1
	fi
	augment-pathvar-if-exists PATH "$@"
}

augment-cdpath-if-exists(){
	if [[ $# -lt 1 ]]; then
		echo "Requires argument of path to add to CDPATH."
		return 1
	fi
	augment-pathvar-if-exists CDPATH "$@"
}

# Appends ':DIRECTORY' to the variable of a given name for every directory provided
# Usage: augment-pathvar-if-exists PATHVAR DIRECTORIES..."
augment-pathvar-if-exists(){
	if [[ $# -lt 2 ]]; then
		echo "Requires 2 or more arguments. Usage: augment-pathvar-if-exists PATHVAR DIRECTORIES..."
		return 1
	fi
	local varname="$1"
	for dirPath in "${@:2}"; do
		if [ ! -d "$dirPath" ]; then
			echo "Unable to add directory to $varname variable: '$dirPath' is not a directory"
			continue
		fi
		export $varname="${!varname}:$dirPath";
	done
}

### Variable Functions
export-if-exists(){
	if [[ $# -lt 2 ]]; then
		echo "Requires argument of variable name to export and path to check."
		return 1
	fi
	variableName="$1"
	if [[ -z "$variableName" ]]; then
		echo "${FUNCNAME[0]}: Empty variable name given. Returning."
		return 2
	fi
	path="$2"
	if [[ -z "$path" ]]; then
		echo "${FUNCNAME[0]}: path to export as $variableName is empty. Returning."
		return 3
	fi
	# If something exists at $path
	if [ -e "$path" ]; then
		export "$variableName"="$path";
	else
		echo "Unable to export variable $variableName: unable to find '$path'"
	fi
}

# runs a command if a variable is not empty
# usage: run-if-not-empty VAR_NAME COMMAND
run-if-not-empty() {
	local varName="$1"
	local varVal="$(eval echo \$$varName)"
	if [[ -z "$varVal" ]]; then
		echo "$varName not set"
		return 1
	fi
	shift
	eval "$@"
}

### Source Functions

source-profile() {
	local usage="usage: ${FUNCNAME[0]} name path"
	local name="${1:?"$usage"}"
	local path="${2:?"$usage"}"
	if [[ ! -f $path ]]; then
		echo "No $name profile found at $path"
		return 1
	fi
	. $path
}
source-environment(){
	source-profile "environment" "$GOH_BASHPROFILE_DIR/environment/$1"
}
_source-environment() {
	local cur files
	cur="${COMP_WORDS[COMP_CWORD]}"
	files="$(ls $GOH_BASHPROFILE_DIR/environment)"
	COMPREPLY=( $(compgen -W "${files}" -- ${cur}) )
}
complete -F _source-environment source-environment

source-utilities(){
	source-profile "utilities" "$GOH_BASHPROFILE_DIR/utilities/$1"
}

#
export-if-exists GOH_BASHPROFILE_DIR "$(dirname $GOH_BASHPROFILE)"

# EMOJIS
export SHRUG='¬Ø\_(„ÉÑ)_/¬Ø'
alias emoji-cyclist-male='echo "üö¥‚Äç‚ôÇÔ∏è" && <<<"üö¥‚Äç‚ôÇÔ∏è" | tr -f "\n" | copy'
alias emoji-cyclist-female='echo "üö¥‚Äç‚ôÄÔ∏è" && <<<"üö¥‚Äç‚ôÄÔ∏è" | tr -f "\n" | copy'

# ALIASES
# PERMANENT ALIASES
alias datestring='date -u "+20%y%m%d_%H%M"'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias ipof='dig +short'
alias lsusers='cut -d: -f1 /etc/passwd'
alias lslisteningports='netstat -lpn'
alias shrug="echo '$SHRUG' && echo '$SHRUG' | copy && echo \"Copied to clipboard.\""
alias ssh-ignore-known-hosts="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias scratchpad='$EDITOR $HOME/.scratchpad'
alias time='command time'

# used for generating a bash completion where the
# suggested values are the keys of a given file
# this will only work when the keys don't have spaces in
_json_keys_completion(){
	local file="$1"
	local parent="$2"
	local word="$3"

	# there may be a better way than using tr here.
	# it seemed that it wouldn't work without removing the new lines.
	# TODO: come back and look at doing this another way
	compgen -W "$(jq ".$parent | keys[]" "$file" | tr '\n' '\t')" -- "$word"
}

# FUNCTIONS

# alert-when-pid-finished depends on notify-send, which is installed on ubuntu.
# if trying to user alert-when-pid-finished on an unsupported OS, please fix it :)
alert-when-pid-finished() {
	local usage="usage: alert-when-pid-finished PID"
	local pid="${1:?"$usage"}"
	while [ -d /proc/$pid ] ; do
		printf .
		sleep 1
	done && printf "\n" && notify-send "pid:$pid finished!"
}

bu() { cp $@ $@.backup-`date +%y%m%d`; echo "`date +%Y-%m-%d` backed up $PWD/$@" >> ${HOME}/.backups.log; }

cdtemp() {
	cd `mktemp -d`
}

cdu() {
	local ups="$1"

	if [[ -z "$ups" ]]; then
		ups="1"
	fi
	
	if ! [[ "$ups" =~ ^[0-9]+$ ]]; then
		return "Argument should be an integer. Given: $ups"
	fi

	echo "cd .. $ups times"
	COUNTER=0
	
	while [[ $COUNTER -lt $ups ]] && [[ "$PWD" != "/" ]]; do
			pwd
			cd ..
			(( COUNTER++ ))
	done
	pwd
}

convert-to-gif() {
	local file="${1:?must provide input file}"
	# ffmpeg -i "$file" -pix_fmt rgb24 "$file.gif"
	ffmpeg -i "$file" -vf "fps=30,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 "$file.gif"
}

dequery() { echo ${1%%\?*}; }

diff-cache-set () { local file="${1:?must provide file}"; cp -v "$file" /tmp/diff-cache.tmp; }
diff-cache () { local file="${1:?must provide file}"; diff /tmp/diff-cache.tmp "$file"; }

echoArguments() {
	echo "\$# - $#"
	echo "\$* - $*"
	echo "\$@ - $@"
	echo "for var in \"\$@; do echo \"\$var\""
	for var in "$@"; do
		echo "$var"
	done
	echo "for var in \"\$*; do echo \"\$*var\""
	for var in "$*"; do
		echo "$var"
	done
}

externalIP() {
	wget http://ipinfo.io/ip -qO -
}

exit-if-error() {
	exitStatus="$1"
	message="$2"
	if [[ $exitStatus -ne 0 ]]; then
		printf "Exit status: $exitStatus. $2"
		exit $exitStatus
	fi
}

fswatchsimple() {
	echo "Watching: $1"
	echo "Command: ${@:2}"
	# vim can put a file called 4913 in its working directory so if I start using vim, I will have to work out how to ignore this file
	# fswatch -0 "$1" | xargs -0 grep -v 4913
	fswatch -0 "$1" | xargs -0 -n 1 -I "{}" "${@:2}"
	# something like this will work but I'm not sure what. fswatch "$1" | grep -Z -v 4913 | xargs -0 -n 1 -I "{}" "${@:2}"
}

highlight-makefile() {
	source-highlight -s Makefile --out-format esc256 < ${1:-./Makefile}
}

historyplain() {
	tput bold
	HISTTIMEFORMAT= history $@ | cut -c 8-
	tput sgr0
}

mkcd() {
	if [ -d "$1" ]; then
		echo "$1 is already a directory"
		echo "Would you like to go to it? (yes/no)"
		read answer
		if [ "$answer" != 'yes' ] && [ "$answer" != 'y' ]; then
			return 0
		fi
	else 
		echo "Making directory $1..."
		mkdir -p "$1"
		test $? -eq 0 || return 1
	fi
	
	echo "Entering directory $1..."
	cd "$1"
}

moneybackups() {
	make -C ~/Dropbox/money/db/scripts backups
}

mp3DownloadsToMusic() {
	if [ -f $DOWNLOADS/*.mp3 ]; then
		echo "MP3S WOOOOH"
		for mp3File in $DOWNLOADS/*.mp3; do
			mv "$mp3File" "$MUSIC"
			echo "Moving "$mp3File""
		done
		echo "Files moved to $MUSIC"
	else
		echo "No .mp3 files to move from $DOWNLOADS directory"
	fi
}

newscript() {
	scriptFile="$1"
	if [[ -z "$scriptFile" ]]; then
		defaultNew="./newscript.sh"
		echo "No script file given. Making a new one at $defaultNew"
		scriptFile="$defaultNew"
	fi
	touch "$scriptFile"
	chmod 700 "$scriptFile"
	echo '#!/bin/bash' > $scriptFile
	echo 'set -euf -o pipefail' >> $scriptFile
	subl "$scriptFile" --command "move_to args to eof" && subl --command 'move_to {"to": "eof"}'
}

notes-search() {
	cmd=$(echo grep  -i "'$1'" -r "$NOTES")
	echo "$cmd"
	eval "$cmd"
}

notify-pushover() {
	local message="${1:?must provide message body}"
	curl -s \
		--form-string "token=${PUSHOVER_TOKEN:?PUSHOVER_TOKEN is not set}" \
		--form-string "user=${PUSHOVER_USER_KEY:?PUSHOVER_USER_KEY is not set}" \
		--form-string "message=$message" \
		https://api.pushover.net/1/messages.json
}

random-string() {
	< /dev/urandom LC_CTYPE=C tr -dc 'a-zA-Z0-9!@#$%^_+?><' | head -c ${1:-32}
}

random-words() {
	< /usr/share/dict/words sort -R | head -${1:-5} | tr "\n" " "
}

ssh-disk-capacity(){
	echo "ONLY DISKS BEGINNING WITH /dev"
	for server in "$@"; do
		echo "$server";
		ssh "$server" 'df -h' | grep --color=none -E '^/dev';
	done
}

stats(){
	echo "OS: ${OS}"
	echo "Shell: ${SHELL}"
}

status-code() {
	local usage="USAGE: ${FUNCNAME[0]} 3-digit-code"
	local codes="${HTTP_STATUS_CODES_JSON:?"HTTP_STATUS_CODES_JSON is not set"}"
	if [[ ! -f "$codes" ]]; then
		echo status codes json cannot be found at "$codes"
		return 1
	fi
	jq ".[] | select(.code == \"${1:?"$usage"}\")" <"$codes"
}

tmux-dev() {
	sessionName="session-$(datestring)"
	tmux new-session -d -s "$sessionName"
	tmux split-window -h
	tmux split-window -v
	# -2 means force tmux to assume 256 colours
	tmux -2 attach-session -d 
}

until-successful() {
	local backoff=2
	until "$@";
	do echo ...;
	echo sleeping for "${backoff}s"
	sleep "${backoff}s";
	(( backoff = backoff * 2 ))
	date;
	done;
}

augment-path-if-exists ~/scripts ~/bin ~/tmp/scripts
augment-path-if-exists $GOH_BASHPROFILE_DIR/scripts

OS=$( uname | tr '[:upper:]' '[:lower:]')

source-profile "OS" "$GOH_BASHPROFILE_DIR/os/$OS"

alias hostname-bash-profile='echo $GOH_BASHPROFILE_DIR/hostname/$(hostname)'
source-profile "hostname" "$(hostname-bash-profile)"

source-utilities extract

# ~/tmp should be the last resort when looking for directories
augment-cdpath-if-exists ~/tmp
