# VARIABLES
GOHBASHPROFILE="$HOME/Dropbox/Configs/gohdotfiles/gohbashprofile"
MUSICDATE="$(date "+20%y-%m_%B")"
MUSIC="$(date "+$HOME/Music/20%y-%m_%B")"
DOWNLOADS="$HOME/Downloads"
MAMP="/Applications/MAMP/htdocs/"
SERVICES=~/"Library/Services"

### PATHS
if [ -d "/usr/local/mysql/bin" ]; then
	export PATH=$PATH:/usr/local/mysql/bin
fi

if [ -d "/Applications/Sublime Text.app/Contents/SharedSupport/bin" ]; then
        export PATH=$PATH:"/Applications/Sublime Text.app/Contents/SharedSupport/bin"
elif [ -d "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin" ]; then
       	export PATH=$PATH:"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin"
fi

if [ -d "/Library/Frameworks/Python.framework/Versions/3.5/bin" ]; then
	export PATH=/Library/Frameworks/Python.framework/Versions/3.5/bin:${PATH}
fi

if [ -d "/usr/local/php5/bin" ]; then
	export PATH=/usr/local/php5/bin:${PATH}
fi

if [ -d "/usr/local/php5/bin" ]; then
	export PATH=${PATH}:/Library/TeX/Distributions/.DefaultTeX/Contents/Programs/texbin
fi

if [[ -d ~/"Dropbox/go" ]]; then
	export GOPATH='~/Dropbox/go'
fi

# PERMANENT ALIASES
alias cant_touch='touch'
alias cdmamp='cd $MAMP'
alias cdname='echo ${PWD##*/}'
alias composer='php composer.phar'
alias cp='cp -v'
alias dateSorted='date +%Y%m%d_%H%M'
alias editcron='env EDITOR=nano crontab -e'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ls="ls -Ga"
alias lsusers='cut -d: -f1 /etc/passwd'
alias lslisteningports='netstat -lpn'
alias mv='mv -v'
alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"
alias sshglynserv='ssh glyn@192.168.0.34'

# AWS ALIASES
alias aws-describe-all-instances="aws ec2 describe-instances --query 'Reservations[*].Instances[*].{LaunchTime:LaunchTime,PublicIpAddress:PublicIpAddress,State:State.Name,InstanceId:InstanceId}'"

# AV ORRON GLYN ALIASES
alias squiggmp4='ffmpeg -i ./squiggs-%06d.png  -c:v libx264 -vf format=yuv420p -r 30 squiggs.mp4';

# Icinga Exports
export CC='ccache clang'
export CXX='ccache clang++'
export CCACHE_CPP2=yes

# TEMPORARY ALIASES

[[ -n "$GOHBASHPROFILE" ]] &&  alias editGOHBASHPROFILE="subl -w $GOHBASHPROFILE && . $GOHBASHPROFILE"

# AWS CLI Completer
if [ -x /usr/local/bin/aws_completer ]; then
        complete -C '/usr/local/bin/aws_completer' aws;
fi;

BBCproxy() {
	if [ -z ${http_proxy+x} ] || [ -z ${https_proxy+x} ]; then
		export http_proxy=http://www-cache.reith.bbc.co.uk:80;
		echo "setting http_proxy to $http_proxy";
		export https_proxy=http://www-cache.reith.bbc.co.uk:80;
		echo "setting https_proxy to $https_proxy";
	else 
		echo "http_proxy is already set to '$http_proxy'";
		echo "https_proxy is already set to '$https_proxy'";
		echo "Unset these proxies to change them using the BBCproxy function."
	fi
}

cdu() {
	echo "cd .. $1 times"
	COUNTER=0

	if ! [[ "$1" =~ ^[0-9]+$ ]]; then
		return "Argument should be an integer."
	fi

	while [[ $COUNTER -lt $1 ]] && [[ "$PWD" != "/" ]]; do
			pwd
			cd ..
			(( COUNTER++ ))
	done
	pwd
}

cdl() {
        echo "cd $1"
	echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
        cd $1
        ls
}

cdmus() {
	COMPUTER_NAME="$(scutil --get ComputerName)"
	checkName="Glyn’s iMac"

	if [[ "$COMPUTER_NAME" != "$checkName" ]]; then
		echo "You're on $COMPUTER_NAME, the wrong computer."
	else
		cd $MUSIC
	fi
}

codeception() {
	if [ -f ./vendor/bin/codecept ]; then
		echo running php ./vendor/bin/codecept "$@"
		php ./vendor/bin/codecept "$@"
	else
		echo "$(pwd)/vendor/bin/codecept" does not exist
	fi
}

echoArguments() {
	echo "\$# - $#"
	echo "\$* - $*"
	echo "\$@ - $@"
	echo "for var in \"\$@; do echo \"\$var\""
	for var in "$@"; do
		echo "$var"
	done
	echo "for var in \"\$*; do echo \"\$*var\""
	for var in "$*"; do
		echo "$var"
	done
}

externalIP() {
	wget http://ipinfo.io/ip -qO -
}

getcomposer() {
	curl -sS https://getcomposer.org/installer | php
	printf "\e[31;47;1mNow init your composer project.\e[0m\n"
}


getproxy() {
	printf "=============SYSTEM:=============\n"
	system_profiler SPNetworkDataType | grep -i "proxy" | sed "s/^[ \t]*//"
	printf "=============SHELL:==============\n"
	echo "http_proxy:  $http_proxy"
	echo "https_proxy: $https_proxy"
}

gohmysql() {
	if [ "$*" != 'start' ] && [ "$*" != 'on' ] && [ "$*" != 'stop' ] && [ "$*" != 'off' ]; then
		printf "Requires argument of start, on, stop or off.\n"
		return
	fi
	printf "\e[31;47;1mRequires sudo privileges.\e[0m\n"
	if [ "$*" == 'start' ] || [ "$*" == 'on' ]; then
		sudo launchctl load -F /Library/LaunchDaemons/com.oracle.oss.mysql.mysqld.plist
	elif [ "$*" == 'stop' ] || [ "$*" == 'off' ]; then
	 	sudo launchctl unload -F /Library/LaunchDaemons/com.oracle.oss.mysql.mysqld.plist
	fi
}

mkcd() {
	if [ -d "$1" ]; then
		echo "$1 is already a directory"
		echo "Would you like to go to it? (yes/no)"
		read answer
		if [ "$answer" == 'yes' ] || [ "$answer" == 'y' ]; then
			cd "$1"
		fi
	else 
		echo "Making directory $1..."
		mkdir -p "$1"
		echo "Entering directory $1..."
		cd "$1"
	fi
}

mp3DownloadsToMusic() {
	if [ -f $DOWNLOADS/*.mp3 ]; then
		echo "MP3S WOOOOH"
		for mp3File in $DOWNLOADS/*.mp3; do
			mv "$mp3File" "$MUSIC"
			echo "Moving "$mp3File""
		done
		echo "Files moved to $MUSIC"
	else
		echo "No .mp3 files to move from $DOWNLOADS directory"
	fi
}

setupCodeception() {
	getcomposer;
	wget http://codeception.com/codecept.phar;
	php composer.phar require "codeception/codeception:*";
	php codecept.phar bootstrap;
}

stats(){
	echo "OS: ${OS}"
	echo "Shell: ${SHELL}"
}

toucho() {
	if [ -f "$1" ]; then
		echo "$1 already exists."
		echo "Would you like to open it? (yes/no)"
		read answer
		if [ "$answer" == 'yes' ] || [ "$answer" == 'y' ]; then
			open "$1"
		fi
		# apparently this should work - from http://unix.stackexchange.com/questions/111508/bash-test-if-word-is-in-set
		# if [[ "$answer" =~ ^(yes/ye/y)$ ]]; then 
		# 	open "$1"
		# else
		#     echo "$answer is not in the list"
		# fi
	else
		touch "$1"
		open "$1"
	fi
}

unsetProxies() {
	unset http_proxy
	unset https_proxy
}

# I move across various *nix type OSes. I have found that it’s easiest to keep my login stuff (aliases & environment variables) in separate files as in .aliases-{OS}. E.g.:

# $HOME/.aliases-darwin
# $HOME/.aliases-linux
# All I have to do then in .bashrc, or .profile, whatever is do this:

OS=$( uname | tr '[:upper:]' '[:lower:]')
# . $HOME/.aliases-${OS}
# . $HOME/.environment_variables-${OS}
# and/or

# for SCRIPT in $( ls -1 $HOME/scripts/login/*-${OS} )
# do
#   . ${SCRIPT}
# done

bu() { cp $@ $@.backup-`date +%y%m%d`; echo "`date +%Y-%m-%d` backed up $PWD/$@" >> ~/.backups.log; }

