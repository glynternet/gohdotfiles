export HISTSIZE=10000
export HISTTIMEFORMAT="%y/%m/%d %T "
export CDPATH=.:~
export VISUAL=vim
export EDITOR=$VISUAL

## Profile Functions
### Path Functions
augment-path-if-exists(){
	if [[ $# -lt 1 ]]; then
		echo "Requires argument of path to add to PATH."
		exit 1
	fi
	for dirPath in "$@"; do
		# dirPath="$1"
		if [ -d "$dirPath" ]; then
			export PATH="$PATH:$dirPath";
		else
			echo "Unable to add directory to PATH: unable to find '$dirPath'"
		fi
	done
}

augment-cdpath-if-exists(){
	if [[ $# -lt 1 ]]; then
		echo "Requires argument of path to add to CDPATH."
		return 1
	fi
	for dirPath in "$@"; do
		if [ -d "$dirPath" ]; then
			export CDPATH="$CDPATH:$dirPath";
		else
			echo "Unable to add directory to CDPATH: unable to find '$dirPath'"
		fi
	done
}

### Variable Functions
export-if-exists(){
	if [[ $# -lt 2 ]]; then
		echo "Requires argument of variable name to export and path to check."
		exit 1
	fi
	variableName="$1"
	if [[ -z "$variableName" ]]; then
		echo "Empty variable name given. Exiting."
	fi
	path="$2"
	if [[ -z "$path" ]]; then
		echo "Empty variable name given. Exiting."
	fi
	# If something exists at $path
	if [ -e "$path" ]; then
		export "$variableName"="$path";
	else
		echo "Unable to export variable $variableName: unable to find '$path'"
	fi
}

# runs a command if a variable is not empty
# usage: run-if-not-empty VAR_NAME COMMAND
run-if-not-empty() {
	local varName="$1"
	local command="$2"
	local varVal="$(eval echo \$$varName)"
	if [[ -z "$varVal" ]]; then
		echo "$varName not set"
		return 1
	fi
	eval "$command"
}

### Source Functions
source-if-exists(){
	if [[ $# -ne 1 ]]; then
		echo "Requires 1 argument of file to source."
		return 1
	fi
	path="$1"
	if [[ -z "$path" ]]; then
		echo "No path provided"
		return 2
	fi
	if [[ ! -f "$path" ]]; then
		echo "Cannot source file at $path: Not a file."
		return 3
	fi
	. "$path"
}


source-environment(){
	source-if-exists $GOH_BASHPROFILE_DIR/environment/$1
}
source-organisation(){
	source-if-exists $GOH_BASHPROFILE_DIR/organisation/$1	
}

#
export-if-exists GOH_BASHPROFILE_DIR $GOH_DOTFILES/bash

# VARIABLES
export SHRUG='¯\_(ツ)_/¯'
export MERGED_EMOJI=":dancer: merged"
export MOVED_EMOJI="moved :dancer:"
export MERGED_AND_MOVED_EMOJI="$MERGED_EMOJI & $MOVED_EMOJI"

# ALIASES
# PERMANENT ALIASES
alias cp='cp -v'
alias copythis='cat <<EOF | copy'
alias datestring='date -u "+20%y%m%d_%H%M"'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias ipof='dig +short'
alias lsusers='cut -d: -f1 /etc/passwd'
alias lslisteningports='netstat -lpn'
alias mv='mv -v'
alias shrug="echo '$SHRUG' && echo '$SHRUG' | copy && echo \"Copied to clipboard.\""
alias merged="echo '$MERGED_EMOJI' && echo '$MERGED_EMOJI' | copy && echo \"Copied to clipboard.\""
alias moved="echo '$MOVED_EMOJI' && echo '$MOVED_EMOJI' | copy && echo \"Copied to clipboard.\""
alias merged-and-moved="echo '$MERGED_AND_MOVED_EMOJI' && echo '$MERGED_AND_MOVED_EMOJI' | copy && echo 'Copied to clipboard.'"
alias ssh-ignore-known-hosts="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias scratchpad='$EDITOR $HOME/.scratchpad'

# AV ORRON GLYN ALIASES
alias squiggsmp4='ffmpeg -i ./squiggs-%06d.png  -c:v libx264 -vf format=yuv420p -r 30 squiggs.mp4'

disk-space(){
	baseDir="$1"
	if [[ -z "$baseDir" ]]; then
		echo "No base directory given, using root."
		baseDir="/"
	fi
	depth="$2"
	if [[ -z "$depth" ]]; then
		echo "No max depth given, using 1."
		depth=1
	fi
	sudo du -d"$depth" "$baseDir" | sort -g
}

# FUNCTIONS

bu() { cp $@ $@.backup-`date +%y%m%d`; echo "`date +%Y-%m-%d` backed up $PWD/$@" >> ${HOME}/.backups.log; }

cdu() {
	local ups="$1"

	if [[ -z "$ups" ]]; then
		ups="1"
	fi
	
	if ! [[ "$ups" =~ ^[0-9]+$ ]]; then
		return "Argument should be an integer. Given: $ups"
	fi

	echo "cd .. $ups times"
	COUNTER=0
	
	while [[ $COUNTER -lt $ups ]] && [[ "$PWD" != "/" ]]; do
			pwd
			cd ..
			(( COUNTER++ ))
	done
	pwd
}

cdl() {
        echo "cd $1"
	echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
        cd $1
        ls
}

echoArguments() {
	echo "\$# - $#"
	echo "\$* - $*"
	echo "\$@ - $@"
	echo "for var in \"\$@; do echo \"\$var\""
	for var in "$@"; do
		echo "$var"
	done
	echo "for var in \"\$*; do echo \"\$*var\""
	for var in "$*"; do
		echo "$var"
	done
}

externalIP() {
	wget http://ipinfo.io/ip -qO -
}

exit-if-error() {
	exitStatus="$1"
	message="$2"
	if [[ $exitStatus -ne 0 ]]; then
		printf "Exit status: $exitStatus. $2"
		exit $exitStatus
	fi
}

findflacs() {
	if [[ -z "$1" ]]; then
		echo "No find location given."
		return
	fi
	echo $2
	if [[ "$2" = 'avprobe' ]] || [[ "$2" = '--avprobe' ]] ; then
		find "$1" -iname '*.flac' -exec avprobe {} \;
	else
		find "$1" -iname '*.flac'
	fi
	
}

fswatchsimple() {
	echo "Watching: $1"
	echo "Command: ${@:2}"
	# vim can put a file called 4913 in its working directory so if I start using vim, I will have to work out how to ignore this file
	# fswatch -0 "$1" | xargs -0 grep -v 4913
	fswatch -0 "$1" | xargs -0 -n 1 -I "{}" "${@:2}"
	# something like this will work but I'm not sure what. fswatch "$1" | grep -Z -v 4913 | xargs -0 -n 1 -I "{}" "${@:2}"
}

historyplain() {
	tput bold
	history $@ | cut -c 8-
	tput sgr0
}

install-and-log(){
	aptGetInstalledList=~/Dropbox/bash/package-installs/apt-get
	if [[ ! -f "$aptGetInstalledList" ]]; then
		echo "Unable to find log file at $aptGetInstalledList."
		echo "Will not be able to log install."
		echo "Exiting."
		return 1
	fi
	sudo apt-get install $1 && echo $1 >> "$aptGetInstalledList"
	if [[ $? -ne 0 ]]; then
		return $?
	fi
	echo "====LOGGED PACKAGES===="
	cat "$aptGetInstalledList"
}

mkcd() {
	if [ -d "$1" ]; then
		echo "$1 is already a directory"
		echo "Would you like to go to it? (yes/no)"
		read answer
		if [ "$answer" != 'yes' ] && [ "$answer" != 'y' ]; then
			return 0
		fi
	else 
		echo "Making directory $1..."
		mkdir -p "$1"
		test $? -eq 0 || return 1
	fi
	
	echo "Entering directory $1..."
	cd "$1"
}

moneybackups() {
	make -C ~/Dropbox/money/db/scripts backups
}

mp3DownloadsToMusic() {
	if [ -f $DOWNLOADS/*.mp3 ]; then
		echo "MP3S WOOOOH"
		for mp3File in $DOWNLOADS/*.mp3; do
			mv "$mp3File" "$MUSIC"
			echo "Moving "$mp3File""
		done
		echo "Files moved to $MUSIC"
	else
		echo "No .mp3 files to move from $DOWNLOADS directory"
	fi
}

newscript() {
	scriptFile=$1
	if [[ -z $scriptFile ]]; then
		defaultNew="./newscript.sh"
		echo "No script file given. Making a new one at $defaultNew"
		scriptFile=$defaultNew
	fi
	touch $scriptFile
	chmod 700 $scriptFile
	echo '#!/bin/bash' > $scriptFile
	subl $scriptFile --command "move_to args to eof" && subl --command 'move_to {"to": "eof"}'
}

notes-search() {
	cmd=$(echo grep  -i "'$1'" -r "$NOTES")
	echo "$cmd"
	eval "$cmd"
}

ssh-disk-capacity(){
	echo "ONLY DISKS BEGINNING WITH /dev"
	for server in "$@"; do
		echo "$server";
		ssh "$server" 'df -h' | grep --color=none -E '^/dev';
	done
}

stats(){
	echo "OS: ${OS}"
	echo "Shell: ${SHELL}"
}

tmux-dev() {
	sessionName="session-$(datestring)"
	tmux new-session -d -s "$sessionName"
	tmux split-window -h
	tmux split-window -v
	# -2 means force tmux to assume 256 colours
	tmux -2 attach-session -d 
}

wifi() {
	name="$1"
	if [[ -z "$name" ]]; then
		cat $WIFICODES
		return
	fi
	grep -i $name $WIFICODES 
}

augment-path-if-exists ~/scripts ~/bin ~/tmp/scripts
augment-path-if-exists $GOH_BASHPROFILE_DIR/scripts

OS=$( uname | tr '[:upper:]' '[:lower:]')
profile="$GOH_BASHPROFILE_DIR/os/$OS"
if [[ -f $profile ]]; then
	. $profile
else
	echo "No OS specific profile found at $profile"
fi
unset profile

alias hostname-bash-profile='echo $GOH_BASHPROFILE_DIR/hostname/$(hostname)'
profile="$(hostname-bash-profile)"
if [[ -f $profile ]]; then
	. $profile
else
	echo "No hostname specific profile found at $profile"
fi
unset profile

# ~/tmp should be the last resort when looking for directories
augment-cdpath-if-exists ~/tmp
